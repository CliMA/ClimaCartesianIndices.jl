var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Efforts in GPUArrays\nGPUArrays issue\nKernelAbstractions efforts\nMetal.jl issue\nStaticCartesian.jl\nHacker's Delight","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ClimaCartesianIndices.FastCartesianIndices","category":"page"},{"location":"api/#ClimaCartesianIndices.FastCartesianIndices","page":"API","title":"ClimaCartesianIndices.FastCartesianIndices","text":"FastCartesianIndices\n\nFastCartesianIndices is a drop-in replacement for CartesianIndices.\n\nUnlike CartesianIndices, FastCartesianIndices avoids integer division by using Base.MultiplicativeInverses.SignedMultiplicativeInverse.\n\nwarn: Warn\nFastCartesianIndices internally uses Int32 and is therefore only valid when the product of the input indices are less than or equal to typemax(Int32) (2147483647)\n\n\n\n\n\n","category":"type"},{"location":"#ClimaCartesianIndices.jl","page":"Home","title":"ClimaCartesianIndices.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package implements a type called FastCartesianIndices, which is a drop-in replacement for CartesianIndices. FastCartesianIndices uses Julia Base's SignedMultiplicativeInverse to avoid integer division when converting linear indexes to cartesian indexes. This is especially useful on the gpu, which can have a nearly 2x performance impact.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warn: Warn\nFastCartesianIndices internally uses Int32 and is therefore only valid when the product of the input indices are less than or equal to typemax(Int32) (2147483647)","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using ClimaCartesianIndices: FastCartesianIndices\nusing CUDA;\n\nfunction perf_linear_index!(X, Y)\n    x1 = X.x1;\n    nitems = length(parent(x1));\n    max_threads = 256; # can be higher if conditions permit\n    nthreads = min(max_threads, nitems);\n    nblocks = cld(nitems, nthreads);\n    CUDA.@cuda threads=nthreads blocks=nblocks name=\"linear\" perf_linear_index_kernel!(\n        X,\n        Y,\n        Val(nitems),\n    )\nend;\nfunction perf_linear_index_kernel!(X, Y, ::Val{nitems}) where {nitems}\n    (; x1, x2, x3, x4) = X\n    (; y1) = Y\n    @inbounds begin\n        i = CUDA.threadIdx().x +\n          (CUDA.blockIdx().x - Int32(1)) * CUDA.blockDim().x\n        if i ≤ nitems\n            # more flops makes them much closer\n            # y1[i] = x1[i] + x2[i] + x3[i] + x4[i]\n            y1[i] = x1[i]\n        end\n    end\n    return nothing\nend;\nfunction perf_cart_index!(X, Y, cart_inds)\n    x1 = X.x1;\n    nitems = length(parent(x1));\n    max_threads = 256; # can be higher if conditions permit\n    nthreads = min(max_threads, nitems);\n    nblocks = cld(nitems, nthreads);\n    CUDA.@cuda threads=nthreads blocks=nblocks name=\"cartesian\" perf_cart_index_kernel!(\n        X,\n        Y,\n        Val(nitems),\n        cart_inds,\n    )\nend;\nunval(::Val{CI}) where {CI} = CI\nunval(CI) = CI\nfunction perf_cart_index_kernel!(X, Y, ::Val{nitems}, cart_inds) where {nitems}\n    (; x1, x2, x3, x4) = X\n    (; y1) = Y\n    @inbounds begin\n        _i = CUDA.threadIdx().x +\n          (CUDA.blockIdx().x - Int32(1)) * CUDA.blockDim().x\n        if _i ≤ nitems && _i ≤ length(unval(cart_inds))\n            CI = unval(cart_inds)\n            i = CI[_i]\n            # more flops makes them much closer\n            # y1[i] = x1[i] + x2[i] + x3[i] + x4[i]\n            y1[i] = x1[i]\n        end\n    end\n    return nothing\nend;\n\nfunction get_arrays(sym, AType, FT, s, n = 4)\n    println(\"array_type = $AType\")\n    fn = ntuple(i -> Symbol(sym, i), n)\n    return (; zip(fn, ntuple(_ -> AType(zeros(FT, s...)), n))...)\nend;\nusing CUDA;\narray_size = (50, 5, 5, 6, 5400); # array\nX = get_arrays(:x, CUDA.CuArray, Float64, array_size);\nY = get_arrays(:y, CUDA.CuArray, Float64, array_size);\n\nfast_ci(x) = FastCartesianIndices(map(Int32, size(x)))\n\nCUDA.@profile begin\n    perf_linear_index!(X, Y)\n    perf_linear_index!(X, Y)\n    perf_linear_index!(X, Y)\n    perf_linear_index!(X, Y)\nend\n\nCUDA.@profile begin\n    perf_cart_index!(X, Y, CartesianIndices(X.x1))\n    perf_cart_index!(X, Y, CartesianIndices(X.x1))\n    perf_cart_index!(X, Y, CartesianIndices(X.x1))\n    perf_cart_index!(X, Y, CartesianIndices(X.x1))\nend\n\nCUDA.@profile begin\n    perf_cart_index!(X, Y, Val(CartesianIndices(X.x1)))\n    perf_cart_index!(X, Y, Val(CartesianIndices(X.x1)))\n    perf_cart_index!(X, Y, Val(CartesianIndices(X.x1)))\n    perf_cart_index!(X, Y, Val(CartesianIndices(X.x1)))\nend\n\nCUDA.@profile begin\n    perf_cart_index!(X, Y, fast_ci(X.x1))\n    perf_cart_index!(X, Y, fast_ci(X.x1))\n    perf_cart_index!(X, Y, fast_ci(X.x1))\n    perf_cart_index!(X, Y, fast_ci(X.x1))\nend\n\nCUDA.@profile begin\n    perf_cart_index!(X, Y, Val(fast_ci(X.x1)))\n    perf_cart_index!(X, Y, Val(fast_ci(X.x1)))\n    perf_cart_index!(X, Y, Val(fast_ci(X.x1)))\n    perf_cart_index!(X, Y, Val(fast_ci(X.x1)))\nend","category":"page"},{"location":"#Results-(NVIDIA-A100)","page":"Home","title":"Results (NVIDIA A100)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For perf_linear_index!:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Device-side activity: GPU was busy for 1.51 ms (94.36% of the trace)\n┌──────────┬────────────┬───────┬──────────────────────────────────────┬────────┐\n│ Time (%) │ Total time │ Calls │ Time distribution                    │ Name   │\n├──────────┼────────────┼───────┼──────────────────────────────────────┼────────┤\n│   94.36% │    1.51 ms │     4 │ 377.24 µs ± 1.5    (375.75 ‥ 379.32) │ linear │\n└──────────┴────────────┴───────┴──────────────────────────────────────┴────────┘","category":"page"},{"location":"","page":"Home","title":"Home","text":"For perf_cart_index!(X, Y, CartesianIndices(...))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Device-side activity: GPU was busy for 3.56 ms (97.21% of the trace)\n┌──────────┬────────────┬───────┬─────────────────────────────────────┬───────────┐\n│ Time (%) │ Total time │ Calls │ Time distribution                   │ Name      │\n├──────────┼────────────┼───────┼─────────────────────────────────────┼───────────┤\n│   97.21% │    3.56 ms │     4 │ 889.06 µs ± 0.19   (888.82 ‥ 889.3) │ cartesian │\n└──────────┴────────────┴───────┴─────────────────────────────────────┴───────────┘","category":"page"},{"location":"","page":"Home","title":"Home","text":"For perf_cart_index!(X, Y, Val(CartesianIndices(...)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Device-side activity: GPU was busy for 2.61 ms (95.98% of the trace)\n┌──────────┬────────────┬───────┬──────────────────────────────────────┬───────────┐\n│ Time (%) │ Total time │ Calls │ Time distribution                    │ Name      │\n├──────────┼────────────┼───────┼──────────────────────────────────────┼───────────┤\n│   95.98% │    2.61 ms │     4 │ 652.13 µs ± 0.23   (651.84 ‥ 652.31) │ cartesian │\n└──────────┴────────────┴───────┴──────────────────────────────────────┴───────────┘","category":"page"},{"location":"","page":"Home","title":"Home","text":"For perf_cart_index!(X, Y, fast_ci(...))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Device-side activity: GPU was busy for 2.43 ms (95.79% of the trace)\n┌──────────┬────────────┬───────┬──────────────────────────────────────┬───────────┐\n│ Time (%) │ Total time │ Calls │ Time distribution                    │ Name      │\n├──────────┼────────────┼───────┼──────────────────────────────────────┼───────────┤\n│   95.79% │    2.43 ms │     4 │ 607.31 µs ± 0.41   (606.78 ‥ 607.73) │ cartesian │\n└──────────┴────────────┴───────┴──────────────────────────────────────┴───────────┘","category":"page"},{"location":"","page":"Home","title":"Home","text":"For perf_cart_index!(X, Y, Val(fast_ci(...)))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Device-side activity: GPU was busy for 1.64 ms (91.04% of the trace)\n┌──────────┬────────────┬───────┬──────────────────────────────────────┬───────────┐\n│ Time (%) │ Total time │ Calls │ Time distribution                    │ Name      │\n├──────────┼────────────┼───────┼──────────────────────────────────────┼───────────┤\n│   91.04% │    1.64 ms │     4 │ 408.89 µs ± 9.92   (397.21 ‥ 420.09) │ cartesian │\n└──────────┴────────────┴───────┴──────────────────────────────────────┴───────────┘","category":"page"}]
}
